import json
from channels.generic.websocket import AsyncWebsocketConsumer
from django.contrib.auth import get_user_model
from rest_framework_simplejwt.tokens import AccessToken
from channels.db import database_sync_to_async
from .models import Chat, Message

User = get_user_model()


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query_string (–Ω–∞–ø—Ä–∏–º–µ—Ä, ?token=<JWT_TOKEN>)
        self.user = None
        self.chat_id = self.scope["path"].strip("/").split("/")[-1]

        try:
            query_string = self.scope["query_string"].decode()
            token_key = query_string.split("token=")[-1] if "token=" in query_string else None

            if token_key:
                access_token = AccessToken(token_key)
                self.user = await database_sync_to_async(User.objects.get)(id=access_token["user_id"])
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {self.user.email}")
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            await self.close()
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
        self.chat = await self.get_chat()

        if self.user not in await self.get_chat_participants():
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.user.email} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ {self.chat_id}")
            await self.close()
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã WebSocket (–≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ —Å–ª—É—à–∞—é—Ç —ç—Ç—É –≥—Ä—É–ø–ø—É)
            self.room_group_name = f"chat_{self.chat_id}"

            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥—Ä—É–ø–ø–µ
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)

            await self.accept()
            print(f"‚úÖ {self.user.email} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É {self.chat_id}")

    @database_sync_to_async
    def get_chat(self):
        return Chat.objects.get(id=self.chat_id)

    @database_sync_to_async
    def get_chat_participants(self):
        return list(self.chat.participants.all())

    async def disconnect(self, close_code):
        print(f"üî¥ {self.user.email if self.user else '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —á–∞—Ç–∞ {self.chat_id}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        data = json.loads(text_data)
        message_content = data.get("message", "").strip()

        if not message_content:
            print("‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        message = await self.save_message(message_content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WebSocket –≥—Ä—É–ø–ø—É
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                "type": "chat_message",
                "message": message_content,
                "sender": self.user.email,
                "timestamp": str(message.timestamp),
            },
        )

        print(f"üì© {self.user.email} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {self.chat_id}: {message_content}")

    @database_sync_to_async
    def save_message(self, content):
        return Message.objects.create(chat=self.chat, sender=self.user, content=content)

    async def chat_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –≥—Ä—É–ø–ø–µ"""
        message = event["message"]
        sender = event["sender"]
        timestamp = event["timestamp"]

        await self.send(text_data=json.dumps({
            "message": message,
            "sender": sender,
            "timestamp": timestamp
        }))

        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WebSocket: {message} –æ—Ç {sender}")
